{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM+hQc1BkyL1dewxrwXzr5V",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "afc6b165434944a796da7ffc58183f2e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8aadbdfa33d6449b990fdcbdf1989d55",
              "IPY_MODEL_6343b640d4f34023b284d03461f09b87",
              "IPY_MODEL_2c70600c9aad47bf92d391211570c166",
              "IPY_MODEL_592219125cd943049c119684e229e48a",
              "IPY_MODEL_107fae17e5a341539c5e27626239e87e",
              "IPY_MODEL_a4ec939adc664ad0af456926e05b4be7"
            ],
            "layout": "IPY_MODEL_100345fba5fd4ab8876ddf8ea03a097a"
          }
        },
        "8aadbdfa33d6449b990fdcbdf1989d55": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d2bb11344a80439d81c7d84c7507bbe7",
            "placeholder": "‚Äã",
            "style": "IPY_MODEL_79922b2f220a4c9e93b69b688d4da7ee",
            "value": "<h1 style='text-align: center; color: #2E86AB; margin-bottom: 20px;'>üè¢ Âì°Â∑•Áè≠Ë°®Âä†Áè≠ÊôÇÊï∏Áµ±Ë®àÁ≥ªÁµ±</h1>"
          }
        },
        "6343b640d4f34023b284d03461f09b87": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3d6b36cad43844d09e92e96939bd335f"
            ],
            "layout": "IPY_MODEL_005e1cfb5ecf4d6388f57512bf9264fd"
          }
        },
        "2c70600c9aad47bf92d391211570c166": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0189633efcd84123a25f0afb57825e0c",
            "placeholder": "‚Äã",
            "style": "IPY_MODEL_d6fd141ceeb544cc80313c0315e26a0a",
            "value": "<hr>"
          }
        },
        "592219125cd943049c119684e229e48a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TabModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TabModel",
            "_titles": {
              "0": "üîç Êü•Ë©¢Âä†Áè≠ÊôÇÊï∏",
              "1": "üóìÔ∏è Ëá™ÂÆöÁæ©ÂÅáÊó•ÁÆ°ÁêÜ"
            },
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TabView",
            "box_style": "",
            "children": [
              "IPY_MODEL_9539e846d5b44f9fbe75cac657d83276",
              "IPY_MODEL_133ce35dd0e54a83a8d81f691e81699e"
            ],
            "layout": "IPY_MODEL_1da4b00b350841e6bae4d79f147cbc87",
            "selected_index": 0
          }
        },
        "107fae17e5a341539c5e27626239e87e": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_633f0ec4a96c473692e9e8adc84a9e6a",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "stream",
                "name": "stdout",
                "text": [
                  "üí° Ë´ãÂÖàÈªûÊìä„ÄåÂàùÂßãÂåñË≥áÊñô„ÄçÊåâÈàïËºâÂÖ•Áè≠Ë°®Ë≥áÊñô\n"
                ]
              }
            ]
          }
        },
        "a4ec939adc664ad0af456926e05b4be7": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_3a28af52d9ab4c33ad337acb00b8504d",
            "msg_id": "",
            "outputs": []
          }
        },
        "100345fba5fd4ab8876ddf8ea03a097a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d2bb11344a80439d81c7d84c7507bbe7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "79922b2f220a4c9e93b69b688d4da7ee": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3d6b36cad43844d09e92e96939bd335f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "info",
            "description": "üîÑ ÂàùÂßãÂåñË≥áÊñô",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_3fcc1a27a98145d4ba56c911175c88d8",
            "style": "IPY_MODEL_b36845160edd4a829619f59a61f11a34",
            "tooltip": ""
          }
        },
        "005e1cfb5ecf4d6388f57512bf9264fd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": "center",
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0189633efcd84123a25f0afb57825e0c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d6fd141ceeb544cc80313c0315e26a0a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9539e846d5b44f9fbe75cac657d83276": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_576720be5e9d4be188766fdfc66173b3",
              "IPY_MODEL_b7170f7453e34963ab6bfcda5f517cf5",
              "IPY_MODEL_69318168688e4962aab65bb1893c08be",
              "IPY_MODEL_b7378c9f6413404e8178ab3bda323b17",
              "IPY_MODEL_de4eb63bec5d40978524a5272e4cd4de"
            ],
            "layout": "IPY_MODEL_c7df7a7b05f54ec28555c049b8eba558"
          }
        },
        "133ce35dd0e54a83a8d81f691e81699e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6337981fbc6c4707878a8d0dc67bb8cd",
              "IPY_MODEL_a664c4a5adc746278db7cbfbb4c53389",
              "IPY_MODEL_0621eb08594e4ffa85d4b3202352c912",
              "IPY_MODEL_f1904cac98864e849b138b25710992cc",
              "IPY_MODEL_f21f558484fb4fff978ea5a143424371",
              "IPY_MODEL_1786db0ea58b4f45b5b2053bfa9ecd3e"
            ],
            "layout": "IPY_MODEL_956f6429d60147e2bc0fe919ee278bf0"
          }
        },
        "1da4b00b350841e6bae4d79f147cbc87": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3fcc1a27a98145d4ba56c911175c88d8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": "40px",
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "200px"
          }
        },
        "b36845160edd4a829619f59a61f11a34": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "576720be5e9d4be188766fdfc66173b3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d858a8e466de4d958916fcaedcd539a0",
            "placeholder": "‚Äã",
            "style": "IPY_MODEL_1aac922a7d3240e48e4149bb9cc63a92",
            "value": "<h3>üìã Âì°Â∑•Âä†Áè≠ÊôÇÊï∏Êü•Ë©¢</h3>"
          }
        },
        "b7170f7453e34963ab6bfcda5f517cf5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8b9fd115ae0a4265b73aa8dd0c73d90b"
            ],
            "layout": "IPY_MODEL_d7fd8ef1f1e84f38a2cea0ee40eeb57d"
          }
        },
        "69318168688e4962aab65bb1893c08be": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f0a9dde94bfe47139b53847b879fd837",
              "IPY_MODEL_431e455249e646a7bedf0ec4a749fc30"
            ],
            "layout": "IPY_MODEL_2e3f212cc14c4be1bd6a23d61c5e3f7f"
          }
        },
        "b7378c9f6413404e8178ab3bda323b17": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_9797506340cf411da753b5b2e0d030db",
              "IPY_MODEL_c5454bcaac104fde8f463e0468f14b80"
            ],
            "layout": "IPY_MODEL_55912f7f59404e598fa48c5e67ec6390"
          }
        },
        "de4eb63bec5d40978524a5272e4cd4de": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_5492ba81e7f74dd6beb66ba727159bf6",
            "msg_id": "",
            "outputs": []
          }
        },
        "c7df7a7b05f54ec28555c049b8eba558": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6337981fbc6c4707878a8d0dc67bb8cd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7a794574ca654709ae9e121e8fd0e0b9",
            "placeholder": "‚Äã",
            "style": "IPY_MODEL_e5da462bd91b4fd68d0a6534e473ace8",
            "value": "<h3>üóìÔ∏è Ëá™ÂÆöÁæ©ÂÅáÊó•ÁÆ°ÁêÜ</h3>"
          }
        },
        "a664c4a5adc746278db7cbfbb4c53389": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d71cd005d6fa4c71a50d2b2be79393e5",
            "placeholder": "‚Äã",
            "style": "IPY_MODEL_8bc746d1a8754066af963881a84969a7",
            "value": "<b>Êñ∞Â¢û/ÁßªÈô§ÂÅáÊó•:</b>"
          }
        },
        "0621eb08594e4ffa85d4b3202352c912": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_09889ea1f285495aa2f5fd02b6e632ce",
              "IPY_MODEL_3506fb9b920e447686ddb003ee04ea53",
              "IPY_MODEL_258809f3b48544cba433456fc80349ad"
            ],
            "layout": "IPY_MODEL_1c5c88d1ac7847febe88fd835251d517"
          }
        },
        "f1904cac98864e849b138b25710992cc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_55f153ac668f409e973852d7df9c31f4"
            ],
            "layout": "IPY_MODEL_b25a4679558b48e9be8ce241f67c330c"
          }
        },
        "f21f558484fb4fff978ea5a143424371": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_1154b7138de746d68d2fd6fec00a6bf7",
              "IPY_MODEL_012f9e0b1c114929be87857b275b5461",
              "IPY_MODEL_17d736e49b5840789b4fec49cf11d37d",
              "IPY_MODEL_35633b0e416d4d1f858c0b28bc76ad95"
            ],
            "layout": "IPY_MODEL_8cf8c8ccca49459f8557b09e0a64e932"
          }
        },
        "1786db0ea58b4f45b5b2053bfa9ecd3e": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_4b0058ef92ed4fb69afcad88c79aecb7",
            "msg_id": "",
            "outputs": []
          }
        },
        "956f6429d60147e2bc0fe919ee278bf0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d858a8e466de4d958916fcaedcd539a0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1aac922a7d3240e48e4149bb9cc63a92": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8b9fd115ae0a4265b73aa8dd0c73d90b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "‰∫∫‰∫ãËôü:",
            "description_tooltip": null,
            "disabled": true,
            "index": null,
            "layout": "IPY_MODEL_cdb6b232bfa34794b470ab16f6a08c44",
            "style": "IPY_MODEL_bd3c4c08b91d43b79ca5ca545ea3d75f"
          }
        },
        "d7fd8ef1f1e84f38a2cea0ee40eeb57d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f0a9dde94bfe47139b53847b879fd837": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntTextView",
            "continuous_update": false,
            "description": "Ë•øÂÖÉÂπ¥:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_e052459466994b0aa00c4b05747412f2",
            "step": 1,
            "style": "IPY_MODEL_1f59e7f9dfd54294972d25575dee3b16",
            "value": 2025
          }
        },
        "431e455249e646a7bedf0ec4a749fc30": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1Êúà",
              "2Êúà",
              "3Êúà",
              "4Êúà",
              "5Êúà",
              "6Êúà",
              "7Êúà",
              "8Êúà",
              "9Êúà",
              "10Êúà",
              "11Êúà",
              "12Êúà"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Êúà‰ªΩ:",
            "description_tooltip": null,
            "disabled": false,
            "index": 6,
            "layout": "IPY_MODEL_3460e5b340a74c8fa2cc4b448b4e2be2",
            "style": "IPY_MODEL_db432abc128b4b36a07a6a8cfdd2dc99"
          }
        },
        "2e3f212cc14c4be1bd6a23d61c5e3f7f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9797506340cf411da753b5b2e0d030db": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "üîç Êü•Ë©¢Âä†Áè≠ÊôÇÊï∏",
            "disabled": true,
            "icon": "",
            "layout": "IPY_MODEL_457c1d5566c2404aa7f9813e68c860cb",
            "style": "IPY_MODEL_0a028682b168418ca6fbbe2a948f1bac",
            "tooltip": ""
          }
        },
        "c5454bcaac104fde8f463e0468f14b80": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "success",
            "description": "üìä ÂåØÂá∫ExcelÂ†±Ë°®",
            "disabled": true,
            "icon": "",
            "layout": "IPY_MODEL_92b055f6e36b489492a6025a5b50b26c",
            "style": "IPY_MODEL_5898ca9f05744074b1db438c348351f0",
            "tooltip": ""
          }
        },
        "55912f7f59404e598fa48c5e67ec6390": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": "center",
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7a794574ca654709ae9e121e8fd0e0b9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e5da462bd91b4fd68d0a6534e473ace8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d71cd005d6fa4c71a50d2b2be79393e5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8bc746d1a8754066af963881a84969a7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "09889ea1f285495aa2f5fd02b6e632ce": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntTextView",
            "continuous_update": false,
            "description": "Âπ¥‰ªΩ:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_05326b261a7a4a89bf5581e0671fa316",
            "step": 1,
            "style": "IPY_MODEL_35b26a0e34d845fba3c79807b0c34bfd",
            "value": 2025
          }
        },
        "3506fb9b920e447686ddb003ee04ea53": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1Êúà",
              "2Êúà",
              "3Êúà",
              "4Êúà",
              "5Êúà",
              "6Êúà",
              "7Êúà",
              "8Êúà",
              "9Êúà",
              "10Êúà",
              "11Êúà",
              "12Êúà"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Êúà‰ªΩ:",
            "description_tooltip": null,
            "disabled": false,
            "index": 6,
            "layout": "IPY_MODEL_e188c10033cd4bf780f454975c1f1d83",
            "style": "IPY_MODEL_0ccf76bdece44b318161ebe4395088e8"
          }
        },
        "258809f3b48544cba433456fc80349ad": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntTextView",
            "continuous_update": false,
            "description": "Êó•Êúü:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_1c9f09c9faee49b8b9d81061a0f680f4",
            "step": 1,
            "style": "IPY_MODEL_25aace92ee8a4cf0b3414d16a5ea9f73",
            "value": 1
          }
        },
        "1c5c88d1ac7847febe88fd835251d517": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "55f153ac668f409e973852d7df9c31f4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "ÂÅáÊó•ÂéüÂõ†:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_e10156d124744da89a59355f9683aacf",
            "placeholder": "‚Äã",
            "style": "IPY_MODEL_18a7ca62f4154936b847851606e2a21c",
            "value": "Ëá™ÂÆöÁæ©ÂÅáÊó•"
          }
        },
        "b25a4679558b48e9be8ce241f67c330c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1154b7138de746d68d2fd6fec00a6bf7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "success",
            "description": "‚ûï Êñ∞Â¢ûÂÅáÊó•",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_f402230deaa84efa84375a35e3432e99",
            "style": "IPY_MODEL_634b1f69ec59472aafa9e237e1017a25",
            "tooltip": ""
          }
        },
        "012f9e0b1c114929be87857b275b5461": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "danger",
            "description": "‚ùå ÁßªÈô§ÂÅáÊó•",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_e42c3e44d6f24b1aaa243bb20edc8994",
            "style": "IPY_MODEL_ea18124c3ea747318517a3200268e9ec",
            "tooltip": ""
          }
        },
        "17d736e49b5840789b4fec49cf11d37d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "warning",
            "description": "üóëÔ∏è Ê∏ÖÈô§ÊâÄÊúâÂÅáÊó•",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_9b77975d2b1840a489ec73e850b71600",
            "style": "IPY_MODEL_6895133dba1e491e94b391fcf528bf1d",
            "tooltip": ""
          }
        },
        "35633b0e416d4d1f858c0b28bc76ad95": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "info",
            "description": "üëÅÔ∏è Êü•ÁúãÂÅáÊó•Ê∏ÖÂñÆ",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_7a71b43e90bb446090cedfbc343acea8",
            "style": "IPY_MODEL_70b33c9e92074494bfaff9a40b8f72c4",
            "tooltip": ""
          }
        },
        "8cf8c8ccca49459f8557b09e0a64e932": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cdb6b232bfa34794b470ab16f6a08c44": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "300px"
          }
        },
        "bd3c4c08b91d43b79ca5ca545ea3d75f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e052459466994b0aa00c4b05747412f2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "150px"
          }
        },
        "1f59e7f9dfd54294972d25575dee3b16": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3460e5b340a74c8fa2cc4b448b4e2be2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "150px"
          }
        },
        "db432abc128b4b36a07a6a8cfdd2dc99": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "457c1d5566c2404aa7f9813e68c860cb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": "40px",
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "200px"
          }
        },
        "0a028682b168418ca6fbbe2a948f1bac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "92b055f6e36b489492a6025a5b50b26c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": "40px",
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "200px"
          }
        },
        "5898ca9f05744074b1db438c348351f0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "05326b261a7a4a89bf5581e0671fa316": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "120px"
          }
        },
        "35b26a0e34d845fba3c79807b0c34bfd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e188c10033cd4bf780f454975c1f1d83": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "120px"
          }
        },
        "0ccf76bdece44b318161ebe4395088e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1c9f09c9faee49b8b9d81061a0f680f4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "120px"
          }
        },
        "25aace92ee8a4cf0b3414d16a5ea9f73": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e10156d124744da89a59355f9683aacf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "200px"
          }
        },
        "18a7ca62f4154936b847851606e2a21c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f402230deaa84efa84375a35e3432e99": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "120px"
          }
        },
        "634b1f69ec59472aafa9e237e1017a25": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "e42c3e44d6f24b1aaa243bb20edc8994": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "120px"
          }
        },
        "ea18124c3ea747318517a3200268e9ec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "9b77975d2b1840a489ec73e850b71600": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "150px"
          }
        },
        "6895133dba1e491e94b391fcf528bf1d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "7a71b43e90bb446090cedfbc343acea8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "150px"
          }
        },
        "70b33c9e92074494bfaff9a40b8f72c4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "633f0ec4a96c473692e9e8adc84a9e6a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3a28af52d9ab4c33ad337acb00b8504d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5492ba81e7f74dd6beb66ba727159bf6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4b0058ef92ed4fb69afcad88c79aecb7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/crystalarcx/publish/blob/main/_widget.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RhAzx-eXPjQD",
        "outputId": "ba477a27-56c2-4ddd-f380-1da0b8e72d32",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 960,
          "referenced_widgets": [
            "afc6b165434944a796da7ffc58183f2e",
            "8aadbdfa33d6449b990fdcbdf1989d55",
            "6343b640d4f34023b284d03461f09b87",
            "2c70600c9aad47bf92d391211570c166",
            "592219125cd943049c119684e229e48a",
            "107fae17e5a341539c5e27626239e87e",
            "a4ec939adc664ad0af456926e05b4be7",
            "100345fba5fd4ab8876ddf8ea03a097a",
            "d2bb11344a80439d81c7d84c7507bbe7",
            "79922b2f220a4c9e93b69b688d4da7ee",
            "3d6b36cad43844d09e92e96939bd335f",
            "005e1cfb5ecf4d6388f57512bf9264fd",
            "0189633efcd84123a25f0afb57825e0c",
            "d6fd141ceeb544cc80313c0315e26a0a",
            "9539e846d5b44f9fbe75cac657d83276",
            "133ce35dd0e54a83a8d81f691e81699e",
            "1da4b00b350841e6bae4d79f147cbc87",
            "3fcc1a27a98145d4ba56c911175c88d8",
            "b36845160edd4a829619f59a61f11a34",
            "576720be5e9d4be188766fdfc66173b3",
            "b7170f7453e34963ab6bfcda5f517cf5",
            "69318168688e4962aab65bb1893c08be",
            "b7378c9f6413404e8178ab3bda323b17",
            "de4eb63bec5d40978524a5272e4cd4de",
            "c7df7a7b05f54ec28555c049b8eba558",
            "6337981fbc6c4707878a8d0dc67bb8cd",
            "a664c4a5adc746278db7cbfbb4c53389",
            "0621eb08594e4ffa85d4b3202352c912",
            "f1904cac98864e849b138b25710992cc",
            "f21f558484fb4fff978ea5a143424371",
            "1786db0ea58b4f45b5b2053bfa9ecd3e",
            "956f6429d60147e2bc0fe919ee278bf0",
            "d858a8e466de4d958916fcaedcd539a0",
            "1aac922a7d3240e48e4149bb9cc63a92",
            "8b9fd115ae0a4265b73aa8dd0c73d90b",
            "d7fd8ef1f1e84f38a2cea0ee40eeb57d",
            "f0a9dde94bfe47139b53847b879fd837",
            "431e455249e646a7bedf0ec4a749fc30",
            "2e3f212cc14c4be1bd6a23d61c5e3f7f",
            "9797506340cf411da753b5b2e0d030db",
            "c5454bcaac104fde8f463e0468f14b80",
            "55912f7f59404e598fa48c5e67ec6390",
            "7a794574ca654709ae9e121e8fd0e0b9",
            "e5da462bd91b4fd68d0a6534e473ace8",
            "d71cd005d6fa4c71a50d2b2be79393e5",
            "8bc746d1a8754066af963881a84969a7",
            "09889ea1f285495aa2f5fd02b6e632ce",
            "3506fb9b920e447686ddb003ee04ea53",
            "258809f3b48544cba433456fc80349ad",
            "1c5c88d1ac7847febe88fd835251d517",
            "55f153ac668f409e973852d7df9c31f4",
            "b25a4679558b48e9be8ce241f67c330c",
            "1154b7138de746d68d2fd6fec00a6bf7",
            "012f9e0b1c114929be87857b275b5461",
            "17d736e49b5840789b4fec49cf11d37d",
            "35633b0e416d4d1f858c0b28bc76ad95",
            "8cf8c8ccca49459f8557b09e0a64e932",
            "cdb6b232bfa34794b470ab16f6a08c44",
            "bd3c4c08b91d43b79ca5ca545ea3d75f",
            "e052459466994b0aa00c4b05747412f2",
            "1f59e7f9dfd54294972d25575dee3b16",
            "3460e5b340a74c8fa2cc4b448b4e2be2",
            "db432abc128b4b36a07a6a8cfdd2dc99",
            "457c1d5566c2404aa7f9813e68c860cb",
            "0a028682b168418ca6fbbe2a948f1bac",
            "92b055f6e36b489492a6025a5b50b26c",
            "5898ca9f05744074b1db438c348351f0",
            "05326b261a7a4a89bf5581e0671fa316",
            "35b26a0e34d845fba3c79807b0c34bfd",
            "e188c10033cd4bf780f454975c1f1d83",
            "0ccf76bdece44b318161ebe4395088e8",
            "1c9f09c9faee49b8b9d81061a0f680f4",
            "25aace92ee8a4cf0b3414d16a5ea9f73",
            "e10156d124744da89a59355f9683aacf",
            "18a7ca62f4154936b847851606e2a21c",
            "f402230deaa84efa84375a35e3432e99",
            "634b1f69ec59472aafa9e237e1017a25",
            "e42c3e44d6f24b1aaa243bb20edc8994",
            "ea18124c3ea747318517a3200268e9ec",
            "9b77975d2b1840a489ec73e850b71600",
            "6895133dba1e491e94b391fcf528bf1d",
            "7a71b43e90bb446090cedfbc343acea8",
            "70b33c9e92074494bfaff9a40b8f72c4",
            "633f0ec4a96c473692e9e8adc84a9e6a",
            "3a28af52d9ab4c33ad337acb00b8504d",
            "5492ba81e7f74dd6beb66ba727159bf6",
            "4b0058ef92ed4fb69afcad88c79aecb7"
          ]
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "üéØ ‰∫íÂãïÂºèÂì°Â∑•Áè≠Ë°®Âä†Áè≠ÊôÇÊï∏Áµ±Ë®àÁ≥ªÁµ±\n",
            "\n",
            "üìã ÂäüËÉΩÁâπËâ≤:\n",
            "‚úÖ Áõ¥ËßÄÁöÑÂúñÂΩ¢Âåñ‰ªãÈù¢ÔºåÁÑ°ÈúÄÊâãÂãïËº∏ÂÖ•Êåá‰ª§\n",
            "‚úÖ ‰∏ãÊãâÈÅ∏ÂñÆÈÅ∏Êìá‰∫∫‰∫ãËôüÔºåÈÅøÂÖçËº∏ÂÖ•ÈåØË™§\n",
            "‚úÖ ‰∫íÂãïÂºèÊúàÊõÜÈÅ∏ÊìáËá™ÂÆöÁæ©ÂÅáÊó•\n",
            "‚úÖ ‰∏ÄÈçµÂåØÂá∫ExcelÂ†±Ë°®\n",
            "‚úÖ Âç≥ÊôÇÈ°ØÁ§∫Êü•Ë©¢ÁµêÊûúÂíåÁµ±Ë®àË≥áË®ä\n",
            "\n",
            "üöÄ Âø´ÈÄüÈñãÂßã:\n",
            "1. Âü∑Ë°å app = create_schedule_system() ÂïüÂãï‰∏ªÁ≥ªÁµ±\n",
            "2. Âü∑Ë°å calendar = create_calendar_selector() ÂïüÂãïÊúàÊõÜÈÅ∏ÊìáÂô®\n",
            "\n",
            "üí° ‰ΩøÁî®ÊµÅÁ®ã:\n",
            "1. ÈªûÊìä„ÄåÂàùÂßãÂåñË≥áÊñô„ÄçËºâÂÖ•Áè≠Ë°®\n",
            "2. Âú®Á¨¨‰∏ÄÂÄãÊ®ôÁ±§È†ÅÈÅ∏Êìá‰∫∫‰∫ãËôüÂíåÂπ¥ÊúàÈÄ≤Ë°åÊü•Ë©¢\n",
            "3. Âú®Á¨¨‰∫åÂÄãÊ®ôÁ±§È†ÅÁÆ°ÁêÜËá™ÂÆöÁæ©ÂÅáÊó•\n",
            "4. ‰ΩøÁî®ÊúàÊõÜÈÅ∏ÊìáÂô®Ë®≠ÂÆöË§áÈõúÁöÑÂÅáÊó•ÂÆâÊéí\n",
            "\n",
            "üì¶ ÂøÖË¶ÅÂ•ó‰ª∂:\n",
            "- pandas\n",
            "- openpyxl\n",
            "- ipywidgets\n",
            "\n",
            "Â¶ÇÈúÄÂÆâË£ù: pip install pandas openpyxl ipywidgets\n",
            "\n",
            "üöÄ Ê≠£Âú®ÂïüÂãï‰∫íÂãïÂºèÂì°Â∑•Áè≠Ë°®Á≥ªÁµ±...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "VBox(children=(HTML(value=\"<h1 style='text-align: center; color: #2E86AB; margin-bottom: 20px;'>üè¢ Âì°Â∑•Áè≠Ë°®Âä†Áè≠ÊôÇÊï∏Áµ±Ë®àÁ≥ªÁµ±‚Ä¶"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "afc6b165434944a796da7ffc58183f2e"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "============================================================\n",
            "üí° ÊèêÁ§∫: Â¶ÇÈúÄ‰ΩøÁî®ÊúàÊõÜÈÅ∏ÊìáÂô®ÔºåË´ãÂü∑Ë°å:\n",
            "calendar = create_calendar_selector()\n",
            "============================================================\n"
          ]
        }
      ],
      "source": [
        "# ‰∫íÂãïÂºèÂì°Â∑•Áè≠Ë°®Âä†Áè≠ÊôÇÊï∏Áµ±Ë®àÁ≥ªÁµ±\n",
        "import pandas as pd\n",
        "from datetime import datetime, date, timedelta\n",
        "from collections import defaultdict\n",
        "import openpyxl\n",
        "from openpyxl.styles import Font, Alignment, PatternFill, Border, Side\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, clear_output, HTML\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# ===== ÂÖ®ÂüüËÆäÊï∏ =====\n",
        "df = None\n",
        "shift_dict = {}\n",
        "custom_holidays = {}\n",
        "\n",
        "# ===== ÂàùÂßãÂåñÂíåË≥áÊñôËÆÄÂèñÂáΩÊï∏ =====\n",
        "def convert_google_sheet_url(url):\n",
        "    \"\"\"Â∞á Google Sheets URL ËΩâÊèõÁÇ∫ÂèØÁõ¥Êé•ËÆÄÂèñÁöÑ CSV URL\"\"\"\n",
        "    if '/d/' in url:\n",
        "        sheet_id = url.split('/d/')[1].split('/')[0]\n",
        "        return f\"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv\"\n",
        "    return None\n",
        "\n",
        "def initialize_data():\n",
        "    \"\"\"ÂàùÂßãÂåñË≥áÊñôËÆÄÂèñ\"\"\"\n",
        "    global df, shift_dict\n",
        "\n",
        "    # Google Sheets URLs\n",
        "    original_url = \"https://docs.google.com/spreadsheets/d/1U8qLraVCRKJhySk0y93I_POP_LsgYjuS/edit?usp=sharing&ouid=115340390490868262616&rtpof=true&sd=true\"\n",
        "    shift_table_url = \"https://docs.google.com/spreadsheets/d/1JfhGZYRBWj6yp90o-sA0DrhzkcEM1Wfd_vqiEZEYd5c/edit?usp=sharing\"\n",
        "\n",
        "    csv_url = convert_google_sheet_url(original_url)\n",
        "    shift_csv_url = convert_google_sheet_url(shift_table_url)\n",
        "\n",
        "    try:\n",
        "        # ËÆÄÂèñÂì°Â∑•Áè≠Ë°®\n",
        "        df_full = pd.read_csv(csv_url)\n",
        "        df = df_full.iloc[:36, :83]  # ÈÅ∏Âèñ A1:CE36 ÁØÑÂúç\n",
        "\n",
        "        # ËÆÄÂèñÁè≠Á®ÆÂ∞çÁÖßË°®\n",
        "        shift_df = pd.read_csv(shift_csv_url)\n",
        "\n",
        "        # Âª∫Á´ãÁè≠Á®ÆÂ≠óÂÖ∏\n",
        "        shift_dict = {}\n",
        "        for index, row in shift_df.iterrows():\n",
        "            shift_type = str(row.iloc[0]).strip()\n",
        "            overtime_hours_1 = row.iloc[1]\n",
        "            overtime_hours_2 = row.iloc[2]\n",
        "            cross_day_hours = row.iloc[3] if len(row) > 3 else None\n",
        "\n",
        "            shift_dict[shift_type] = {\n",
        "                'overtime_hours_1': overtime_hours_1,\n",
        "                'overtime_hours_2': overtime_hours_2,\n",
        "                'cross_day_hours': cross_day_hours\n",
        "            }\n",
        "\n",
        "        return True, f\"‚úÖ Ë≥áÊñôËÆÄÂèñÊàêÂäüÔºÅÁè≠Ë°®: {df.shape}, Áè≠Á®Æ: {len(shift_dict)} Á®Æ\"\n",
        "    except Exception as e:\n",
        "        return False, f\"‚ùå Ë≥áÊñôËÆÄÂèñÂ§±Êïó: {e}\"\n",
        "\n",
        "# ===== Ê†∏ÂøÉË®àÁÆóÂáΩÊï∏ =====\n",
        "def calculate_hours(time_range):\n",
        "    \"\"\"Ë®àÁÆóÊôÇÈñìÁØÑÂúçÁöÑÂ∞èÊôÇÊï∏\"\"\"\n",
        "    try:\n",
        "        if not time_range or pd.isna(time_range):\n",
        "            return None\n",
        "\n",
        "        time_str = str(time_range).strip()\n",
        "\n",
        "        # ËôïÁêÜÈÄóËôü‰ΩúÁÇ∫Â∞èÊï∏ÈªûÁöÑÊÉÖÊ≥Å\n",
        "        if ',' in time_str and '-' not in time_str:\n",
        "            try:\n",
        "                hours = float(time_str.replace(',', '.'))\n",
        "                return hours\n",
        "            except:\n",
        "                pass\n",
        "\n",
        "        # Â¶ÇÊûú‰∏çÂåÖÂê´ÂàÜÈöîÁ¨¶ÔºåÂèØËÉΩÊòØÂñÆÁ¥îÁöÑÂ∞èÊôÇÊï∏\n",
        "        if '-' not in time_str:\n",
        "            try:\n",
        "                hours = float(time_str)\n",
        "                return hours\n",
        "            except:\n",
        "                return None\n",
        "\n",
        "        # Ê∏ÖÁêÜÊôÇÈñìÂ≠ó‰∏≤\n",
        "        time_str = time_str.replace(' ', '').replace(',', '')\n",
        "\n",
        "        if '-' in time_str:\n",
        "            parts = time_str.split('-')\n",
        "            if len(parts) != 2:\n",
        "                return None\n",
        "            start_str, end_str = parts\n",
        "        else:\n",
        "            return None\n",
        "\n",
        "        def parse_time_hhmm(time_str):\n",
        "            \"\"\"Ëß£Êûê HH:MM Ê†ºÂºèÁöÑÊôÇÈñì\"\"\"\n",
        "            time_str = time_str.strip()\n",
        "\n",
        "            # ËôïÁêÜ HH:MM Ê†ºÂºè\n",
        "            if ':' in time_str:\n",
        "                try:\n",
        "                    parts = time_str.split(':')\n",
        "                    if len(parts) == 2:\n",
        "                        hour = int(parts[0])\n",
        "                        minute = int(parts[1])\n",
        "                        if 0 <= hour <= 23 and 0 <= minute <= 59:\n",
        "                            return hour, minute\n",
        "                except ValueError:\n",
        "                    pass\n",
        "\n",
        "            # ËôïÁêÜ HHMM Ê†ºÂºè\n",
        "            if len(time_str) == 4 and time_str.isdigit():\n",
        "                try:\n",
        "                    hour = int(time_str[:2])\n",
        "                    minute = int(time_str[2:])\n",
        "                    if 0 <= hour <= 23 and 0 <= minute <= 59:\n",
        "                        return hour, minute\n",
        "                except ValueError:\n",
        "                    pass\n",
        "\n",
        "            # ËôïÁêÜ HH Ê†ºÂºè\n",
        "            if time_str.isdigit() and 1 <= len(time_str) <= 2:\n",
        "                try:\n",
        "                    hour = int(time_str)\n",
        "                    if 0 <= hour <= 23:\n",
        "                        return hour, 0\n",
        "                except ValueError:\n",
        "                    pass\n",
        "\n",
        "            # ËôïÁêÜÂ∏∂Â∞èÊï∏ÈªûÁöÑÂ∞èÊôÇÊï∏Ê†ºÂºè\n",
        "            try:\n",
        "                hour_decimal = float(time_str)\n",
        "                if 0 <= hour_decimal <= 24:\n",
        "                    hour = int(hour_decimal)\n",
        "                    minute = int((hour_decimal - hour) * 60)\n",
        "                    if 0 <= hour <= 23 and 0 <= minute <= 59:\n",
        "                        return hour, minute\n",
        "            except ValueError:\n",
        "                pass\n",
        "\n",
        "            return None, None\n",
        "\n",
        "        # Ëß£ÊûêÈñãÂßãÂíåÁµêÊùüÊôÇÈñì\n",
        "        start_hour, start_min = parse_time_hhmm(start_str)\n",
        "        end_hour, end_min = parse_time_hhmm(end_str)\n",
        "\n",
        "        if start_hour is None or end_hour is None:\n",
        "            return None\n",
        "\n",
        "        # ËΩâÊèõÁÇ∫ÂàÜÈêò\n",
        "        start_minutes = start_hour * 60 + start_min\n",
        "        end_minutes = end_hour * 60 + end_min\n",
        "\n",
        "        # ËôïÁêÜË∑®Êó•ÊÉÖÊ≥Å\n",
        "        if end_minutes <= start_minutes:\n",
        "            end_minutes += 24 * 60\n",
        "\n",
        "        # Ë®àÁÆóÊôÇÊï∏\n",
        "        total_minutes = end_minutes - start_minutes\n",
        "        hours = total_minutes / 60\n",
        "\n",
        "        return hours\n",
        "\n",
        "    except Exception as e:\n",
        "        return None\n",
        "\n",
        "def get_day_type(year, month, day):\n",
        "    \"\"\"Âà§Êñ∑Êó•ÊúüÊòØÂπ≥Êó•ÈÇÑÊòØÂÅáÊó•ÔºàÂê´Ëá™ÂÆöÁæ©ÂÅáÊó•Ôºâ\"\"\"\n",
        "    try:\n",
        "        # Ê™¢Êü•ÊòØÂê¶ÁÇ∫Ëá™ÂÆöÁæ©ÂÅáÊó•\n",
        "        date_key = f\"{year}-{month:02d}-{day:02d}\"\n",
        "        if date_key in custom_holidays:\n",
        "            return custom_holidays[date_key], True\n",
        "\n",
        "        # ‰∏ÄËà¨ÈÄ±Êú´Âà§Êñ∑\n",
        "        current_date = date(year, month, day)\n",
        "        weekday = current_date.weekday()  # 0=ÊòüÊúü‰∏Ä, 6=ÊòüÊúüÊó•\n",
        "\n",
        "        if weekday == 5:  # ÊòüÊúüÂÖ≠\n",
        "            return \"ÂÅáÊó•(ÂÖ≠)\", True\n",
        "        elif weekday == 6:  # ÊòüÊúüÊó•\n",
        "            return \"ÂÅáÊó•(Êó•)\", True\n",
        "        else:  # ÊòüÊúü‰∏ÄÂà∞ÊòüÊúü‰∫î\n",
        "            weekdays = [\"‰∏Ä\", \"‰∫å\", \"‰∏â\", \"Âõõ\", \"‰∫î\"]\n",
        "            return f\"Âπ≥Êó•({weekdays[weekday]})\", False\n",
        "    except ValueError:\n",
        "        return \"ÁÑ°ÊïàÊó•Êúü\", False\n",
        "\n",
        "def extract_chinese_note(time_string):\n",
        "    \"\"\"ÂæûÊôÇÈñìÂ≠ó‰∏≤‰∏≠ÊèêÂèñ‰∏≠ÊñáË®ªË®ò\"\"\"\n",
        "    import re\n",
        "\n",
        "    if not time_string:\n",
        "        return \"Ëá®Â∫äÊ•≠Âãô\"\n",
        "\n",
        "    chinese_pattern = r'[\\u4e00-\\u9fff]+|\\([^\\)]*[\\u4e00-\\u9fff][^\\)]*\\)'\n",
        "    chinese_matches = re.findall(chinese_pattern, time_string)\n",
        "\n",
        "    if chinese_matches:\n",
        "        chinese_note = chinese_matches[0]\n",
        "        chinese_note = chinese_note.replace('(', '').replace(')', '')\n",
        "        return chinese_note\n",
        "    else:\n",
        "        return \"Ëá®Â∫äÊ•≠Âãô\"\n",
        "\n",
        "def calculate_overtime_summary(target_personnel, year, month, matching_columns):\n",
        "    \"\"\"Ë®àÁÆóÊåáÂÆö‰∫∫Âì°ÁöÑÂä†Áè≠ÊôÇÊï∏Áµ±Ë®à\"\"\"\n",
        "    weekday_overtime = 0.0\n",
        "    weekend_overtime = 0.0\n",
        "    total_overtime = 0.0\n",
        "    daily_records = []\n",
        "    cross_day_records = defaultdict(float)\n",
        "    worked_weekdays = set()\n",
        "\n",
        "    # Â∞çÊØèÂÄãÂåπÈÖçÁöÑÊ¨Ñ‰ΩçÈÄ≤Ë°åËôïÁêÜ\n",
        "    for col_idx in matching_columns:\n",
        "        column_data = df.iloc[:, col_idx]\n",
        "\n",
        "        # ËôïÁêÜÊØè‰∏ÄÂ§©\n",
        "        for day in range(1, 32):\n",
        "            try:\n",
        "                current_date = date(year, month, day)\n",
        "            except ValueError:\n",
        "                continue\n",
        "\n",
        "            row_idx = day + 2\n",
        "\n",
        "            if row_idx < len(column_data):\n",
        "                value = column_data.iloc[row_idx]\n",
        "                date_str = f\"{year}/{month:02d}/{day:02d}\"\n",
        "                day_type, is_weekend = get_day_type(year, month, day)\n",
        "\n",
        "                shift_value = str(value).strip()\n",
        "\n",
        "                # Ë®òÈåÑÊúâ‰∏äÁè≠ÁöÑÂπ≥Êó•\n",
        "                if shift_value and pd.notna(value) and shift_value != 'nan' and not is_weekend:\n",
        "                    worked_weekdays.add(date_str)\n",
        "\n",
        "                if shift_value in shift_dict and pd.notna(value) and shift_value:\n",
        "                    shift_info = shift_dict[shift_value]\n",
        "                    overtime_1 = shift_info['overtime_hours_1']\n",
        "                    overtime_2 = shift_info['overtime_hours_2']\n",
        "                    cross_day = shift_info['cross_day_hours']\n",
        "\n",
        "                    current_day_overtime = 0.0\n",
        "                    next_day_overtime = 0.0\n",
        "\n",
        "                    # Ë®àÁÆóÁï∂Â§©Âä†Áè≠ÊôÇÊï∏\n",
        "                    if pd.notna(overtime_1) and str(overtime_1).strip():\n",
        "                        calculated_hours_1 = calculate_hours(str(overtime_1))\n",
        "                        if calculated_hours_1 is not None:\n",
        "                            current_day_overtime += calculated_hours_1\n",
        "\n",
        "                    if pd.notna(overtime_2) and str(overtime_2).strip():\n",
        "                        calculated_hours_2 = calculate_hours(str(overtime_2))\n",
        "                        if calculated_hours_2 is not None:\n",
        "                            current_day_overtime += calculated_hours_2\n",
        "\n",
        "                    # Ë®àÁÆóË∑®Â§©ÊôÇÊï∏\n",
        "                    if pd.notna(cross_day) and str(cross_day).strip():\n",
        "                        cross_day_hours = calculate_hours(str(cross_day))\n",
        "                        if cross_day_hours is not None:\n",
        "                            next_day_overtime = cross_day_hours\n",
        "                            next_date = current_date + timedelta(days=1)\n",
        "                            next_date_str = f\"{next_date.year}/{next_date.month:02d}/{next_date.day:02d}\"\n",
        "                            cross_day_records[next_date_str] += next_day_overtime\n",
        "\n",
        "                    # Ë®òÈåÑÁï∂Â§©Ë≥áÊñô\n",
        "                    if current_day_overtime > 0 or next_day_overtime > 0:\n",
        "                        daily_records.append({\n",
        "                            'date': date_str,\n",
        "                            'day_type': day_type,\n",
        "                            'is_weekend': is_weekend,\n",
        "                            'shift': shift_value,\n",
        "                            'current_day_overtime': current_day_overtime,\n",
        "                            'cross_day_overtime': next_day_overtime\n",
        "                        })\n",
        "\n",
        "    # Âª∫Á´ãÂÆåÊï¥ÁöÑÊó•ÊúüÂä†Áè≠ÊôÇÊï∏Ë®òÈåÑ\n",
        "    final_daily_overtime = defaultdict(float)\n",
        "\n",
        "    # ÂÖàÂä†ÂÖ•Áï∂Â§©ÁöÑÂä†Áè≠ÊôÇÊï∏\n",
        "    for record in daily_records:\n",
        "        date_str = record['date']\n",
        "        current_overtime = record['current_day_overtime']\n",
        "        if current_overtime > 0:\n",
        "            final_daily_overtime[date_str] += current_overtime\n",
        "\n",
        "    # ÂÜçÂä†ÂÖ•Ë∑®Â§©ÊôÇÊï∏\n",
        "    for date_str, cross_hours in cross_day_records.items():\n",
        "        final_daily_overtime[date_str] += cross_hours\n",
        "\n",
        "    # Ë®àÁÆóÂπ≥Êó•ÂíåÂÅáÊó•Á∏ΩÊôÇÊï∏\n",
        "    for date_str, total_hours in final_daily_overtime.items():\n",
        "        try:\n",
        "            date_parts = date_str.split('/')\n",
        "            check_year = int(date_parts[0])\n",
        "            check_month = int(date_parts[1])\n",
        "            check_day = int(date_parts[2])\n",
        "\n",
        "            day_type, is_weekend = get_day_type(check_year, check_month, check_day)\n",
        "\n",
        "            if is_weekend:\n",
        "                weekend_overtime += total_hours\n",
        "            else:\n",
        "                weekday_overtime += total_hours\n",
        "\n",
        "            total_overtime += total_hours\n",
        "\n",
        "        except (ValueError, IndexError):\n",
        "            continue\n",
        "\n",
        "    # Ê™¢Êü•Âπ≥Êó•Âä†Áè≠ÊôÇÊï∏ÊòØÂê¶Â∞èÊñº46Â∞èÊôÇÔºåÂ¶ÇÊûúÊòØÂâáËá™ÂãïË£úË∂≥\n",
        "    if weekday_overtime < 46:\n",
        "        shortage = 46 - weekday_overtime\n",
        "\n",
        "        # ÊâæÂá∫ÊâÄÊúâË©≤ÊúàÁöÑÂπ≥Êó•‰∏îÊ≤íÊúâ‰∏äÁè≠ÁöÑÊó•Êúü\n",
        "        available_weekdays = []\n",
        "        for day in range(1, 32):\n",
        "            try:\n",
        "                check_date = date(year, month, day)\n",
        "                date_str = f\"{year}/{month:02d}/{day:02d}\"\n",
        "                day_type, is_weekend = get_day_type(year, month, day)\n",
        "                weekday_num = check_date.weekday()\n",
        "\n",
        "                if not is_weekend and date_str not in worked_weekdays:\n",
        "                    if weekday_num in [1, 3]:  # ÈÄ±‰∫å„ÄÅÈÄ±Âõõ\n",
        "                        priority = 1\n",
        "                    elif weekday_num in [0, 2, 4]:  # ÈÄ±‰∏Ä„ÄÅÈÄ±‰∏â„ÄÅÈÄ±‰∫î\n",
        "                        priority = 2\n",
        "                    else:\n",
        "                        priority = 3\n",
        "\n",
        "                    available_weekdays.append((date_str, day_type, weekday_num, priority))\n",
        "            except ValueError:\n",
        "                continue\n",
        "\n",
        "        # ÊåâÂÑ™ÂÖàÈ†ÜÂ∫èÊéíÂ∫è\n",
        "        available_weekdays.sort(key=lambda x: (x[3], x[0]))\n",
        "\n",
        "        if available_weekdays:\n",
        "            days_needed = int(shortage / 2) + (1 if shortage % 2 > 0 else 0)\n",
        "\n",
        "            for i, (date_str, day_type, weekday_num, priority) in enumerate(available_weekdays):\n",
        "                if i < days_needed:\n",
        "                    final_daily_overtime[date_str] += 2.0\n",
        "                    weekday_overtime += 2.0\n",
        "                    total_overtime += 2.0\n",
        "\n",
        "    return weekday_overtime, weekend_overtime, total_overtime, daily_records, final_daily_overtime\n",
        "\n",
        "# ===== Ëá™ÂÆöÁæ©ÂÅáÊó•ÁÆ°ÁêÜÂáΩÊï∏ =====\n",
        "def add_custom_holiday(year, month, day, reason=\"Ëá™ÂÆöÁæ©ÂÅáÊó•\"):\n",
        "    \"\"\"ÊâãÂãïÊñ∞Â¢ûËá™ÂÆöÁæ©ÂÅáÊó•\"\"\"\n",
        "    date_key = f\"{year}-{month:02d}-{day:02d}\"\n",
        "    weekdays = ['‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠', 'Êó•']\n",
        "    try:\n",
        "        current_date = date(year, month, day)\n",
        "        weekday = weekdays[current_date.weekday()]\n",
        "        custom_holidays[date_key] = f\"{reason}({weekday})\"\n",
        "        return True, f\"‚úÖ Â∑≤Êñ∞Â¢ûËá™ÂÆöÁæ©ÂÅáÊó•: {date_key} {reason}({weekday})\"\n",
        "    except ValueError:\n",
        "        return False, f\"‚ùå ÁÑ°ÊïàÊó•Êúü: {year}-{month:02d}-{day:02d}\"\n",
        "\n",
        "def remove_custom_holiday(year, month, day):\n",
        "    \"\"\"ÁßªÈô§Ëá™ÂÆöÁæ©ÂÅáÊó•\"\"\"\n",
        "    date_key = f\"{year}-{month:02d}-{day:02d}\"\n",
        "    if date_key in custom_holidays:\n",
        "        removed = custom_holidays.pop(date_key)\n",
        "        return True, f\"‚úÖ Â∑≤ÁßªÈô§Ëá™ÂÆöÁæ©ÂÅáÊó•: {date_key} ({removed})\"\n",
        "    else:\n",
        "        return False, f\"‚ùå Ë©≤Êó•Êúü‰∏çÊòØËá™ÂÆöÁæ©ÂÅáÊó•: {date_key}\"\n",
        "\n",
        "# ===== Excel ÂåØÂá∫ÂáΩÊï∏ =====\n",
        "def export_to_excel(target_personnel, year, month, matching_columns, export_data):\n",
        "    \"\"\"Â∞éÂá∫ExcelÂ†±Ë°®\"\"\"\n",
        "    try:\n",
        "        filename = f\"{target_personnel}_{year}Âπ¥{month:02d}Êúà_Âä†Áè≠ÊôÇÊï∏Áµ±Ë®à.xlsx\"\n",
        "\n",
        "        excel_data = []\n",
        "        date_time_strings = defaultdict(list)\n",
        "\n",
        "        # Êî∂ÈõÜÂéüÂßãÊôÇÈñìÂ≠ó‰∏≤\n",
        "        for col_idx in matching_columns:\n",
        "            column_data = df.iloc[:, col_idx]\n",
        "\n",
        "            for day in range(1, 32):\n",
        "                try:\n",
        "                    current_date = date(year, month, day)\n",
        "                    date_str = f\"{year}/{month:02d}/{day:02d}\"\n",
        "                    row_idx = day + 2\n",
        "\n",
        "                    if row_idx < len(column_data):\n",
        "                        value = column_data.iloc[row_idx]\n",
        "                        shift_value = str(value).strip()\n",
        "\n",
        "                        if shift_value in shift_dict and pd.notna(value) and shift_value:\n",
        "                            shift_info = shift_dict[shift_value]\n",
        "\n",
        "                            current_day_time_strings = []\n",
        "\n",
        "                            if pd.notna(shift_info['overtime_hours_1']) and str(shift_info['overtime_hours_1']).strip():\n",
        "                                current_day_time_strings.append(str(shift_info['overtime_hours_1']).strip())\n",
        "\n",
        "                            if pd.notna(shift_info['overtime_hours_2']) and str(shift_info['overtime_hours_2']).strip():\n",
        "                                current_day_time_strings.append(str(shift_info['overtime_hours_2']).strip())\n",
        "\n",
        "                            if current_day_time_strings:\n",
        "                                date_time_strings[date_str].extend(current_day_time_strings)\n",
        "\n",
        "                            if pd.notna(shift_info['cross_day_hours']) and str(shift_info['cross_day_hours']).strip():\n",
        "                                cross_day_time_str = str(shift_info['cross_day_hours']).strip()\n",
        "                                next_date = current_date + timedelta(days=1)\n",
        "                                next_date_str = f\"{next_date.year}/{next_date.month:02d}/{next_date.day:02d}\"\n",
        "                                date_time_strings[next_date_str].append(cross_day_time_str)\n",
        "\n",
        "                except ValueError:\n",
        "                    continue\n",
        "\n",
        "        # Âª∫Á´ãExcelË≥áÊñô\n",
        "        for day in range(1, 32):\n",
        "            try:\n",
        "                current_date = date(year, month, day)\n",
        "                date_str = f\"{year}/{month:02d}/{day:02d}\"\n",
        "                day_type, is_weekend = get_day_type(year, month, day)\n",
        "\n",
        "                time_strings = date_time_strings.get(date_str, [])\n",
        "                original_time_str = \",\".join(time_strings) if time_strings else \"\"\n",
        "\n",
        "                weekday_hours = 0.0\n",
        "                weekend_hours = 0.0\n",
        "\n",
        "                if date_str in export_data:\n",
        "                    total_hours = export_data[date_str]\n",
        "                    if is_weekend:\n",
        "                        weekend_hours = total_hours\n",
        "                    else:\n",
        "                        weekday_hours = total_hours\n",
        "\n",
        "                work_type = \"\"\n",
        "                if date_str in export_data and not original_time_str:\n",
        "                    original_time_str = \"14:00-16:00(ÊúÉË≠∞)\"\n",
        "                    work_type = \"ÊúÉË≠∞\"\n",
        "                else:\n",
        "                    work_type = extract_chinese_note(original_time_str)\n",
        "\n",
        "                if original_time_str or weekday_hours > 0 or weekend_hours > 0:\n",
        "                    excel_data.append({\n",
        "                        'Êó•Êúü': f\"{day:02d}\",\n",
        "                        'ÂéüÂßãÊôÇÈñìÂ≠ó‰∏≤': original_time_str,\n",
        "                        'Âπ≥Êó•ÊôÇÊï∏': weekday_hours,\n",
        "                        'ÂÅáÊó•ÊôÇÊï∏': weekend_hours,\n",
        "                        'Â∑•‰ΩúÈ°ûÂûã': work_type\n",
        "                    })\n",
        "\n",
        "            except ValueError:\n",
        "                continue\n",
        "\n",
        "        # Âª∫Á´ãExcelÊ™îÊ°à\n",
        "        df_excel = pd.DataFrame(excel_data)\n",
        "\n",
        "        wb = openpyxl.Workbook()\n",
        "        ws = wb.active\n",
        "        ws.title = f\"{target_personnel}Âä†Áè≠Áµ±Ë®à\"\n",
        "\n",
        "        # Ë®≠ÂÆöÊ®ôÈ°å\n",
        "        headers = ['Êó•Êúü', 'ÂéüÂßãÊôÇÈñìÂ≠ó‰∏≤', 'Âπ≥Êó•ÊôÇÊï∏', 'ÂÅáÊó•ÊôÇÊï∏', 'Â∑•‰ΩúÈ°ûÂûã']\n",
        "        for col, header in enumerate(headers, 1):\n",
        "            cell = ws.cell(row=1, column=col, value=header)\n",
        "            cell.font = Font(bold=True, size=12)\n",
        "            cell.alignment = Alignment(horizontal='center', vertical='center')\n",
        "            cell.fill = PatternFill(start_color='366092', end_color='366092', fill_type='solid')\n",
        "            cell.font = Font(bold=True, color='FFFFFF', size=12)\n",
        "\n",
        "        # Ë®≠ÂÆöÈÇäÊ°Ü\n",
        "        thin_border = Border(\n",
        "            left=Side(style='thin'),\n",
        "            right=Side(style='thin'),\n",
        "            top=Side(style='thin'),\n",
        "            bottom=Side(style='thin')\n",
        "        )\n",
        "\n",
        "        # Â°´ÂÖ•Ë≥áÊñô\n",
        "        for row_idx, row_data in enumerate(df_excel.itertuples(index=False), 2):\n",
        "            for col_idx, value in enumerate(row_data, 1):\n",
        "                cell = ws.cell(row=row_idx, column=col_idx, value=value)\n",
        "                cell.border = thin_border\n",
        "\n",
        "                if col_idx in [3, 4]:  # Âπ≥Êó•ÊôÇÊï∏„ÄÅÂÅáÊó•ÊôÇÊï∏\n",
        "                    cell.alignment = Alignment(horizontal='right', vertical='center')\n",
        "                    if value > 0:\n",
        "                        cell.number_format = '0.0'\n",
        "                elif col_idx == 5:  # Â∑•‰ΩúÈ°ûÂûã\n",
        "                    cell.alignment = Alignment(horizontal='left', vertical='center')\n",
        "                else:\n",
        "                    cell.alignment = Alignment(horizontal='center', vertical='center')\n",
        "\n",
        "        # Ë™øÊï¥Ê¨ÑÂØ¨\n",
        "        column_widths = [8, 30, 12, 12, 15]\n",
        "        for col_idx, width in enumerate(column_widths, 1):\n",
        "            ws.column_dimensions[chr(64 + col_idx)].width = width\n",
        "\n",
        "        # Ê∑ªÂä†Áµ±Ë®à\n",
        "        total_weekday = df_excel['Âπ≥Êó•ÊôÇÊï∏'].sum()\n",
        "        total_weekend = df_excel['ÂÅáÊó•ÊôÇÊï∏'].sum()\n",
        "        total_hours = total_weekday + total_weekend\n",
        "\n",
        "        last_row = len(df_excel) + 3\n",
        "\n",
        "        ws.cell(row=last_row, column=1, value=\"Áµ±Ë®àÁ∏ΩË®à\").font = Font(bold=True, size=12)\n",
        "        ws.cell(row=last_row, column=1).fill = PatternFill(start_color='D9D9D9', end_color='D9D9D9', fill_type='solid')\n",
        "\n",
        "        ws.cell(row=last_row + 1, column=1, value=\"Âπ≥Êó•Âä†Áè≠Á∏ΩÊôÇÊï∏:\")\n",
        "        ws.cell(row=last_row + 1, column=2, value=f\"{total_weekday:.1f} Â∞èÊôÇ\")\n",
        "\n",
        "        ws.cell(row=last_row + 2, column=1, value=\"ÂÅáÊó•Âä†Áè≠Á∏ΩÊôÇÊï∏:\")\n",
        "        ws.cell(row=last_row + 2, column=2, value=f\"{total_weekend:.1f} Â∞èÊôÇ\")\n",
        "\n",
        "        ws.cell(row=last_row + 3, column=1, value=\"Á∏ΩÂä†Áè≠ÊôÇÊï∏:\")\n",
        "        ws.cell(row=last_row + 3, column=2, value=f\"{total_hours:.1f} Â∞èÊôÇ\")\n",
        "        ws.cell(row=last_row + 3, column=2).font = Font(bold=True)\n",
        "\n",
        "        wb.save(filename)\n",
        "\n",
        "        return True, filename, total_weekday, total_weekend, total_hours, len(df_excel)\n",
        "\n",
        "    except Exception as e:\n",
        "        return False, str(e), 0, 0, 0, 0\n",
        "\n",
        "# ===== ‰∫íÂãïÂºè‰ªãÈù¢ÁµÑ‰ª∂ =====\n",
        "\n",
        "class ScheduleSystemApp:\n",
        "    def __init__(self):\n",
        "        self.output = widgets.Output()\n",
        "        self.setup_ui()\n",
        "\n",
        "    def setup_ui(self):\n",
        "        \"\"\"Ë®≠ÁΩÆ‰∏ªË¶ÅUI‰ªãÈù¢\"\"\"\n",
        "        # Ê®ôÈ°å\n",
        "        title = widgets.HTML(\n",
        "            value=\"<h1 style='text-align: center; color: #2E86AB; margin-bottom: 20px;'>üè¢ Âì°Â∑•Áè≠Ë°®Âä†Áè≠ÊôÇÊï∏Áµ±Ë®àÁ≥ªÁµ±</h1>\"\n",
        "        )\n",
        "\n",
        "        # ÂàùÂßãÂåñÊåâÈàï\n",
        "        self.init_btn = widgets.Button(\n",
        "            description='üîÑ ÂàùÂßãÂåñË≥áÊñô',\n",
        "            button_style='info',\n",
        "            layout=widgets.Layout(width='200px', height='40px')\n",
        "        )\n",
        "        self.init_btn.on_click(self.on_init_clicked)\n",
        "\n",
        "        # ÂäüËÉΩÈÅ∏ÊìáÊ®ôÁ±§È†Å\n",
        "        self.tab = widgets.Tab()\n",
        "\n",
        "        # Á¨¨‰∏ÄÂÄãÊ®ôÁ±§È†ÅÔºöÊü•Ë©¢Âä†Áè≠ÊôÇÊï∏\n",
        "        self.query_tab = self.create_query_tab()\n",
        "\n",
        "        # Á¨¨‰∫åÂÄãÊ®ôÁ±§È†ÅÔºöËá™ÂÆöÁæ©ÂÅáÊó•ÁÆ°ÁêÜ\n",
        "        self.holiday_tab = self.create_holiday_tab()\n",
        "\n",
        "        self.tab.children = [self.query_tab, self.holiday_tab]\n",
        "        self.tab.set_title(0, 'üîç Êü•Ë©¢Âä†Áè≠ÊôÇÊï∏')\n",
        "        self.tab.set_title(1, 'üóìÔ∏è Ëá™ÂÆöÁæ©ÂÅáÊó•ÁÆ°ÁêÜ')\n",
        "\n",
        "        # ÁãÄÊÖãÈ°ØÁ§∫\n",
        "        self.status_output = widgets.Output()\n",
        "\n",
        "        # ‰∏ªÂÆπÂô®\n",
        "        self.main_container = widgets.VBox([\n",
        "            title,\n",
        "            widgets.HBox([self.init_btn], layout=widgets.Layout(justify_content='center')),\n",
        "            widgets.HTML(\"<hr>\"),\n",
        "            self.tab,\n",
        "            self.status_output,\n",
        "            self.output\n",
        "        ])\n",
        "\n",
        "    def create_query_tab(self):\n",
        "        \"\"\"ÂâµÂª∫Êü•Ë©¢Ê®ôÁ±§È†Å\"\"\"\n",
        "        # ‰∫∫‰∫ãËôüÈÅ∏Êìá\n",
        "        self.personnel_dropdown = widgets.Dropdown(\n",
        "            options=[],\n",
        "            description='‰∫∫‰∫ãËôü:',\n",
        "            disabled=True,\n",
        "            layout=widgets.Layout(width='300px')\n",
        "        )\n",
        "\n",
        "        # Âπ¥‰ªΩËº∏ÂÖ•\n",
        "        current_year = datetime.now().year\n",
        "        self.year_input = widgets.IntText(\n",
        "            value=current_year,\n",
        "            description='Ë•øÂÖÉÂπ¥:',\n",
        "            layout=widgets.Layout(width='150px')\n",
        "        )\n",
        "\n",
        "        # Êúà‰ªΩÈÅ∏Êìá\n",
        "        self.month_dropdown = widgets.Dropdown(\n",
        "            options=[(f'{i}Êúà', i) for i in range(1, 13)],\n",
        "            value=datetime.now().month,\n",
        "            description='Êúà‰ªΩ:',\n",
        "            layout=widgets.Layout(width='150px')\n",
        "        )\n",
        "\n",
        "        # Êü•Ë©¢ÊåâÈàï\n",
        "        self.query_btn = widgets.Button(\n",
        "            description='üîç Êü•Ë©¢Âä†Áè≠ÊôÇÊï∏',\n",
        "            button_style='primary',\n",
        "            disabled=True,\n",
        "            layout=widgets.Layout(width='200px', height='40px')\n",
        "        )\n",
        "        self.query_btn.on_click(self.on_query_clicked)\n",
        "\n",
        "        # ExcelÂåØÂá∫ÊåâÈàï\n",
        "        self.export_btn = widgets.Button(\n",
        "            description='üìä ÂåØÂá∫ExcelÂ†±Ë°®',\n",
        "            button_style='success',\n",
        "            disabled=True,\n",
        "            layout=widgets.Layout(width='200px', height='40px')\n",
        "        )\n",
        "        self.export_btn.on_click(self.on_export_clicked)\n",
        "\n",
        "        # Êü•Ë©¢ÁµêÊûúÈ°ØÁ§∫\n",
        "        self.result_output = widgets.Output()\n",
        "\n",
        "        return widgets.VBox([\n",
        "            widgets.HTML(\"<h3>üìã Âì°Â∑•Âä†Áè≠ÊôÇÊï∏Êü•Ë©¢</h3>\"),\n",
        "            widgets.HBox([self.personnel_dropdown]),\n",
        "            widgets.HBox([self.year_input, self.month_dropdown]),\n",
        "            widgets.HBox([self.query_btn, self.export_btn], layout=widgets.Layout(justify_content='center')),\n",
        "            self.result_output\n",
        "        ])\n",
        "\n",
        "    def create_holiday_tab(self):\n",
        "        \"\"\"ÂâµÂª∫Ëá™ÂÆöÁæ©ÂÅáÊó•ÁÆ°ÁêÜÊ®ôÁ±§È†Å\"\"\"\n",
        "        # Êñ∞Â¢ûÂÅáÊó•ÂçÄÂüü\n",
        "        self.holiday_year = widgets.IntText(\n",
        "            value=datetime.now().year,\n",
        "            description='Âπ¥‰ªΩ:',\n",
        "            layout=widgets.Layout(width='120px')\n",
        "        )\n",
        "\n",
        "        self.holiday_month = widgets.Dropdown(\n",
        "            options=[(f'{i}Êúà', i) for i in range(1, 13)],\n",
        "            value=datetime.now().month,\n",
        "            description='Êúà‰ªΩ:',\n",
        "            layout=widgets.Layout(width='120px')\n",
        "        )\n",
        "\n",
        "        self.holiday_day = widgets.IntText(\n",
        "            value=1,\n",
        "            description='Êó•Êúü:',\n",
        "            layout=widgets.Layout(width='120px')\n",
        "        )\n",
        "\n",
        "        self.holiday_reason = widgets.Text(\n",
        "            value='Ëá™ÂÆöÁæ©ÂÅáÊó•',\n",
        "            description='ÂÅáÊó•ÂéüÂõ†:',\n",
        "            layout=widgets.Layout(width='200px')\n",
        "        )\n",
        "\n",
        "        # ÂÅáÊó•ÁÆ°ÁêÜÊåâÈàï\n",
        "        self.add_holiday_btn = widgets.Button(\n",
        "            description='‚ûï Êñ∞Â¢ûÂÅáÊó•',\n",
        "            button_style='success',\n",
        "            layout=widgets.Layout(width='120px')\n",
        "        )\n",
        "        self.add_holiday_btn.on_click(self.on_add_holiday_clicked)\n",
        "\n",
        "        self.remove_holiday_btn = widgets.Button(\n",
        "            description='‚ùå ÁßªÈô§ÂÅáÊó•',\n",
        "            button_style='danger',\n",
        "            layout=widgets.Layout(width='120px')\n",
        "        )\n",
        "        self.remove_holiday_btn.on_click(self.on_remove_holiday_clicked)\n",
        "\n",
        "        self.clear_holidays_btn = widgets.Button(\n",
        "            description='üóëÔ∏è Ê∏ÖÈô§ÊâÄÊúâÂÅáÊó•',\n",
        "            button_style='warning',\n",
        "            layout=widgets.Layout(width='150px')\n",
        "        )\n",
        "        self.clear_holidays_btn.on_click(self.on_clear_holidays_clicked)\n",
        "\n",
        "        self.show_holidays_btn = widgets.Button(\n",
        "            description='üëÅÔ∏è Êü•ÁúãÂÅáÊó•Ê∏ÖÂñÆ',\n",
        "            button_style='info',\n",
        "            layout=widgets.Layout(width='150px')\n",
        "        )\n",
        "        self.show_holidays_btn.on_click(self.on_show_holidays_clicked)\n",
        "\n",
        "        # ÂÅáÊó•ÁÆ°ÁêÜËº∏Âá∫\n",
        "        self.holiday_output = widgets.Output()\n",
        "\n",
        "        return widgets.VBox([\n",
        "            widgets.HTML(\"<h3>üóìÔ∏è Ëá™ÂÆöÁæ©ÂÅáÊó•ÁÆ°ÁêÜ</h3>\"),\n",
        "            widgets.HTML(\"<b>Êñ∞Â¢û/ÁßªÈô§ÂÅáÊó•:</b>\"),\n",
        "            widgets.HBox([self.holiday_year, self.holiday_month, self.holiday_day]),\n",
        "            widgets.HBox([self.holiday_reason]),\n",
        "            widgets.HBox([\n",
        "                self.add_holiday_btn,\n",
        "                self.remove_holiday_btn,\n",
        "                self.clear_holidays_btn,\n",
        "                self.show_holidays_btn\n",
        "            ]),\n",
        "            self.holiday_output\n",
        "        ])\n",
        "\n",
        "    def display(self):\n",
        "        \"\"\"È°ØÁ§∫‰∏ª‰ªãÈù¢\"\"\"\n",
        "        display(self.main_container)\n",
        "\n",
        "        # È°ØÁ§∫ÂàùÂßãÊèêÁ§∫\n",
        "        with self.status_output:\n",
        "            print(\"üí° Ë´ãÂÖàÈªûÊìä„ÄåÂàùÂßãÂåñË≥áÊñô„ÄçÊåâÈàïËºâÂÖ•Áè≠Ë°®Ë≥áÊñô\")\n",
        "\n",
        "    def on_init_clicked(self, btn):\n",
        "        \"\"\"ÂàùÂßãÂåñË≥áÊñôÊåâÈàïÈªûÊìä‰∫ã‰ª∂\"\"\"\n",
        "        with self.status_output:\n",
        "            clear_output()\n",
        "            print(\"üîÑ Ê≠£Âú®ËºâÂÖ•Ë≥áÊñô...\")\n",
        "\n",
        "        success, message = initialize_data()\n",
        "\n",
        "        with self.status_output:\n",
        "            clear_output()\n",
        "            print(message)\n",
        "\n",
        "        if success:\n",
        "            # Êõ¥Êñ∞‰∫∫‰∫ãËôü‰∏ãÊãâÈÅ∏ÂñÆ\n",
        "            personnel_numbers = df.iloc[1, :].tolist()\n",
        "            personnel_options = []\n",
        "\n",
        "            for i, num in enumerate(personnel_numbers):\n",
        "                if pd.notna(num) and str(num).strip():\n",
        "                    col_name = chr(65 + i) if i < 26 else chr(65 + i//26 - 1) + chr(65 + i%26)\n",
        "                    personnel_options.append((f\"{num} (Column {col_name})\", str(num).strip()))\n",
        "\n",
        "            self.personnel_dropdown.options = personnel_options\n",
        "            self.personnel_dropdown.disabled = False\n",
        "            self.query_btn.disabled = False\n",
        "\n",
        "            with self.status_output:\n",
        "                print(f\"‚úÖ Ë≥áÊñôËºâÂÖ•ÂÆåÊàêÔºÅÊâæÂà∞ {len(personnel_options)} ÂÄã‰∫∫‰∫ãËôü\")\n",
        "\n",
        "    def on_query_clicked(self, btn):\n",
        "        \"\"\"Êü•Ë©¢ÊåâÈàïÈªûÊìä‰∫ã‰ª∂\"\"\"\n",
        "        if not self.personnel_dropdown.value:\n",
        "            with self.result_output:\n",
        "                clear_output()\n",
        "                print(\"‚ùå Ë´ãÈÅ∏Êìá‰∫∫‰∫ãËôü\")\n",
        "            return\n",
        "\n",
        "        target_personnel = self.personnel_dropdown.value\n",
        "        year = self.year_input.value\n",
        "        month = self.month_dropdown.value\n",
        "\n",
        "        with self.result_output:\n",
        "            clear_output()\n",
        "            print(f\"üîç Ê≠£Âú®Êü•Ë©¢ {target_personnel} ÁöÑ {year}Âπ¥{month}Êúà Âä†Áè≠ÊôÇÊï∏...\")\n",
        "\n",
        "        # Êü•ÊâæÂåπÈÖçÁöÑÊ¨Ñ‰Ωç\n",
        "        personnel_numbers = df.iloc[1, :].tolist()\n",
        "        matching_columns = []\n",
        "\n",
        "        for col_idx, personnel_num in enumerate(personnel_numbers):\n",
        "            if pd.notna(personnel_num) and str(personnel_num).strip() == target_personnel:\n",
        "                matching_columns.append(col_idx)\n",
        "\n",
        "        if not matching_columns:\n",
        "            with self.result_output:\n",
        "                clear_output()\n",
        "                print(f\"‚ùå Êú™ÊâæÂà∞‰∫∫‰∫ãËôü: {target_personnel}\")\n",
        "            return\n",
        "\n",
        "        # Ë®àÁÆóÂä†Áè≠ÊôÇÊï∏\n",
        "        weekday_hours, weekend_hours, total_hours, records, daily_breakdown = calculate_overtime_summary(\n",
        "            target_personnel, year, month, matching_columns\n",
        "        )\n",
        "\n",
        "        # ÂÑ≤Â≠òÊü•Ë©¢ÁµêÊûú‰æõÂåØÂá∫‰ΩøÁî®\n",
        "        self.last_query_result = {\n",
        "            'target_personnel': target_personnel,\n",
        "            'year': year,\n",
        "            'month': month,\n",
        "            'matching_columns': matching_columns,\n",
        "            'daily_breakdown': daily_breakdown,\n",
        "            'weekday_hours': weekday_hours,\n",
        "            'weekend_hours': weekend_hours,\n",
        "            'total_hours': total_hours\n",
        "        }\n",
        "\n",
        "        # È°ØÁ§∫ÁµêÊûú\n",
        "        with self.result_output:\n",
        "            clear_output()\n",
        "\n",
        "            # È°ØÁ§∫Ëá™ÂÆöÁæ©ÂÅáÊó•Ë≥áË®ä\n",
        "            if custom_holidays:\n",
        "                current_month_holidays = {k: v for k, v in custom_holidays.items()\n",
        "                                         if k.startswith(f\"{year}-{month:02d}-\")}\n",
        "                if current_month_holidays:\n",
        "                    print(f\"üèñÔ∏è Êú¨ÊúàËá™ÂÆöÁæ©ÂÅáÊó• ({len(current_month_holidays)} Â§©):\")\n",
        "                    for date_key, desc in sorted(current_month_holidays.items()):\n",
        "                        print(f\"   - {date_key}: {desc}\")\n",
        "                    print()\n",
        "\n",
        "            print(\"=\" * 60)\n",
        "            print(f\"üìä {target_personnel} ÁöÑ {year}Âπ¥{month}Êúà Âä†Áè≠ÊôÇÊï∏Áµ±Ë®àÁµêÊûú\")\n",
        "            print(\"=\" * 60)\n",
        "            print(f\"Âπ≥Êó•Âä†Áè≠ÊôÇÊï∏: {weekday_hours:.1f} Â∞èÊôÇ\")\n",
        "            print(f\"ÂÅáÊó•Âä†Áè≠ÊôÇÊï∏: {weekend_hours:.1f} Â∞èÊôÇ\")\n",
        "            print(f\"Á∏ΩÂä†Áè≠ÊôÇÊï∏:   {total_hours:.1f} Â∞èÊôÇ\")\n",
        "            print(\"=\" * 60)\n",
        "\n",
        "            # È°ØÁ§∫Ë©≥Á¥∞ÊØèÊó•Ë≥áÊñô\n",
        "            if daily_breakdown:\n",
        "                print(\"\\nüìÖ Ë©≥Á¥∞ÊØèÊó•Âä†Áè≠Ë®òÈåÑ:\")\n",
        "                print(\"-\" * 50)\n",
        "                for date_str, hours in sorted(daily_breakdown.items()):\n",
        "                    if hours > 0:\n",
        "                        date_parts = date_str.split('/')\n",
        "                        check_year = int(date_parts[0])\n",
        "                        check_month = int(date_parts[1])\n",
        "                        check_day = int(date_parts[2])\n",
        "                        day_type, is_weekend = get_day_type(check_year, check_month, check_day)\n",
        "                        print(f\"{date_str} {day_type}: {hours:.1f}Â∞èÊôÇ\")\n",
        "\n",
        "        # ÂïüÁî®ÂåØÂá∫ÊåâÈàï\n",
        "        self.export_btn.disabled = False\n",
        "\n",
        "    def on_export_clicked(self, btn):\n",
        "        \"\"\"ÂåØÂá∫ExcelÊåâÈàïÈªûÊìä‰∫ã‰ª∂\"\"\"\n",
        "        if not hasattr(self, 'last_query_result'):\n",
        "            with self.result_output:\n",
        "                print(\"‚ùå Ë´ãÂÖàÂü∑Ë°åÊü•Ë©¢ÂæåÂÜçÂåØÂá∫\")\n",
        "            return\n",
        "\n",
        "        result = self.last_query_result\n",
        "\n",
        "        with self.result_output:\n",
        "            print(\"\\nüìä Ê≠£Âú®Áî¢ÁîüExcelÂ†±Ë°®...\")\n",
        "\n",
        "        success, filename_or_error, weekday_total, weekend_total, total_hours, row_count = export_to_excel(\n",
        "            result['target_personnel'],\n",
        "            result['year'],\n",
        "            result['month'],\n",
        "            result['matching_columns'],\n",
        "            result['daily_breakdown']\n",
        "        )\n",
        "\n",
        "        with self.result_output:\n",
        "            if success:\n",
        "                print(f\"‚úÖ ExcelÂ†±Ë°®ÂåØÂá∫ÊàêÂäüÔºÅ\")\n",
        "                print(f\"üìÅ Ê™îÊ°àÂêçÁ®±: {filename_or_error}\")\n",
        "                print(f\"üìã ÂåÖÂê´Ë≥áÊñô: {row_count} Â§©\")\n",
        "                print(f\"‚è∞ Âπ≥Êó•Âä†Áè≠: {weekday_total:.1f} Â∞èÊôÇ\")\n",
        "                print(f\"üéØ ÂÅáÊó•Âä†Áè≠: {weekend_total:.1f} Â∞èÊôÇ\")\n",
        "                print(f\"üìà Á∏ΩË®àÊôÇÊï∏: {total_hours:.1f} Â∞èÊôÇ\")\n",
        "            else:\n",
        "                print(f\"‚ùå ExcelÂåØÂá∫Â§±Êïó: {filename_or_error}\")\n",
        "\n",
        "    def on_add_holiday_clicked(self, btn):\n",
        "        \"\"\"Êñ∞Â¢ûÂÅáÊó•ÊåâÈàïÈªûÊìä‰∫ã‰ª∂\"\"\"\n",
        "        year = self.holiday_year.value\n",
        "        month = self.holiday_month.value\n",
        "        day = self.holiday_day.value\n",
        "        reason = self.holiday_reason.value.strip()\n",
        "\n",
        "        if not reason:\n",
        "            reason = \"Ëá™ÂÆöÁæ©ÂÅáÊó•\"\n",
        "\n",
        "        success, message = add_custom_holiday(year, month, day, reason)\n",
        "\n",
        "        with self.holiday_output:\n",
        "            clear_output()\n",
        "            print(message)\n",
        "            if success:\n",
        "                self.show_current_holidays()\n",
        "\n",
        "    def on_remove_holiday_clicked(self, btn):\n",
        "        \"\"\"ÁßªÈô§ÂÅáÊó•ÊåâÈàïÈªûÊìä‰∫ã‰ª∂\"\"\"\n",
        "        year = self.holiday_year.value\n",
        "        month = self.holiday_month.value\n",
        "        day = self.holiday_day.value\n",
        "\n",
        "        success, message = remove_custom_holiday(year, month, day)\n",
        "\n",
        "        with self.holiday_output:\n",
        "            clear_output()\n",
        "            print(message)\n",
        "            if success:\n",
        "                self.show_current_holidays()\n",
        "\n",
        "    def on_clear_holidays_clicked(self, btn):\n",
        "        \"\"\"Ê∏ÖÈô§ÊâÄÊúâÂÅáÊó•ÊåâÈàïÈªûÊìä‰∫ã‰ª∂\"\"\"\n",
        "        # ÂâµÂª∫Á¢∫Ë™çÂ∞çË©±Ê°Ü\n",
        "        confirm_btn = widgets.Button(description='Á¢∫Ë™çÊ∏ÖÈô§', button_style='danger')\n",
        "        cancel_btn = widgets.Button(description='ÂèñÊ∂à', button_style='')\n",
        "\n",
        "        def on_confirm(btn):\n",
        "            custom_holidays.clear()\n",
        "            with self.holiday_output:\n",
        "                clear_output()\n",
        "                print(\"‚úÖ Â∑≤Ê∏ÖÈô§ÊâÄÊúâËá™ÂÆöÁæ©ÂÅáÊó•\")\n",
        "\n",
        "        def on_cancel(btn):\n",
        "            with self.holiday_output:\n",
        "                clear_output()\n",
        "                print(\"‚ùå Êìç‰ΩúÂ∑≤ÂèñÊ∂à\")\n",
        "                self.show_current_holidays()\n",
        "\n",
        "        confirm_btn.on_click(on_confirm)\n",
        "        cancel_btn.on_click(on_cancel)\n",
        "\n",
        "        with self.holiday_output:\n",
        "            clear_output()\n",
        "            print(\"‚ö†Ô∏è Á¢∫ÂÆöË¶ÅÊ∏ÖÈô§ÊâÄÊúâËá™ÂÆöÁæ©ÂÅáÊó•ÂóéÔºü\")\n",
        "            display(widgets.HBox([confirm_btn, cancel_btn]))\n",
        "\n",
        "    def on_show_holidays_clicked(self, btn):\n",
        "        \"\"\"Êü•ÁúãÂÅáÊó•Ê∏ÖÂñÆÊåâÈàïÈªûÊìä‰∫ã‰ª∂\"\"\"\n",
        "        with self.holiday_output:\n",
        "            clear_output()\n",
        "            self.show_current_holidays()\n",
        "\n",
        "    def show_current_holidays(self):\n",
        "        \"\"\"È°ØÁ§∫ÁõÆÂâçÁöÑËá™ÂÆöÁæ©ÂÅáÊó•Ê∏ÖÂñÆ\"\"\"\n",
        "        if not custom_holidays:\n",
        "            print(\"üìÖ ÁõÆÂâçÊ≤íÊúâË®≠ÂÆö‰ªª‰ΩïËá™ÂÆöÁæ©ÂÅáÊó•\")\n",
        "            return\n",
        "\n",
        "        print(f\"üìÖ ÁõÆÂâçË®≠ÂÆöÁöÑËá™ÂÆöÁæ©ÂÅáÊó• (ÂÖ± {len(custom_holidays)} Â§©):\")\n",
        "        print(\"=\" * 50)\n",
        "        for date_key, description in sorted(custom_holidays.items()):\n",
        "            print(f\"  {date_key}: {description}\")\n",
        "        print(\"=\" * 50)\n",
        "\n",
        "# ===== ÊúàÊõÜÈÅ∏ÊìáÂô®ÁµÑ‰ª∂ =====\n",
        "class InteractiveCalendar:\n",
        "    def __init__(self, year=None, month=None):\n",
        "        self.year = year or datetime.now().year\n",
        "        self.month = month or datetime.now().month\n",
        "        self.selected_holidays = set()\n",
        "        self.setup_calendar()\n",
        "\n",
        "    def setup_calendar(self):\n",
        "        \"\"\"Ë®≠ÁΩÆÊúàÊõÜ‰ªãÈù¢\"\"\"\n",
        "        # Âπ¥ÊúàÈÅ∏ÊìáÂô®\n",
        "        self.year_slider = widgets.IntSlider(\n",
        "            value=self.year,\n",
        "            min=2020,\n",
        "            max=2030,\n",
        "            description='Âπ¥‰ªΩ:',\n",
        "            layout=widgets.Layout(width='300px')\n",
        "        )\n",
        "\n",
        "        self.month_slider = widgets.IntSlider(\n",
        "            value=self.month,\n",
        "            min=1,\n",
        "            max=12,\n",
        "            description='Êúà‰ªΩ:',\n",
        "            layout=widgets.Layout(width='300px')\n",
        "        )\n",
        "\n",
        "        # Êõ¥Êñ∞ÊåâÈàï\n",
        "        self.update_btn = widgets.Button(\n",
        "            description='üîÑ Êõ¥Êñ∞ÊúàÊõÜ',\n",
        "            button_style='info'\n",
        "        )\n",
        "        self.update_btn.on_click(self.update_calendar)\n",
        "\n",
        "        # ÂåØÂá∫ÊåâÈàï\n",
        "        self.export_btn = widgets.Button(\n",
        "            description='üì§ ÂåØÂá∫ÂÅáÊó•Ë®≠ÂÆö',\n",
        "            button_style='success'\n",
        "        )\n",
        "        self.export_btn.on_click(self.export_holidays)\n",
        "\n",
        "        # ÊúàÊõÜÈ°ØÁ§∫ÂçÄÂüü\n",
        "        self.calendar_output = widgets.Output()\n",
        "\n",
        "        # ÂåØÂá∫ÁµêÊûúÈ°ØÁ§∫ÂçÄÂüü\n",
        "        self.export_output = widgets.Output()\n",
        "\n",
        "        # ‰∏ªÂÆπÂô®\n",
        "        self.container = widgets.VBox([\n",
        "            widgets.HTML(\"<h2 style='text-align: center;'>üóìÔ∏è ‰∫íÂãïÂºèÊúàÊõÜÂÅáÊó•ÈÅ∏ÊìáÂô®</h2>\"),\n",
        "            widgets.HBox([self.year_slider, self.month_slider]),\n",
        "            widgets.HBox([self.update_btn, self.export_btn]),\n",
        "            self.calendar_output,\n",
        "            widgets.HTML(\"<hr>\"),\n",
        "            widgets.HTML(\"<h3>üì§ ÂåØÂá∫ÁöÑÂÅáÊó•Ë®≠ÂÆöÁ®ãÂºèÁ¢º:</h3>\"),\n",
        "            self.export_output\n",
        "        ])\n",
        "\n",
        "        # ÂàùÂßãÂåñÈ°ØÁ§∫ÊúàÊõÜ\n",
        "        self.update_calendar(None)\n",
        "\n",
        "    def update_calendar(self, btn):\n",
        "        \"\"\"Êõ¥Êñ∞ÊúàÊõÜÈ°ØÁ§∫\"\"\"\n",
        "        self.year = self.year_slider.value\n",
        "        self.month = self.month_slider.value\n",
        "\n",
        "        with self.calendar_output:\n",
        "            clear_output()\n",
        "            self.display_calendar()\n",
        "\n",
        "    def display_calendar(self):\n",
        "        \"\"\"È°ØÁ§∫‰∫íÂãïÂºèÊúàÊõÜ\"\"\"\n",
        "        import calendar\n",
        "\n",
        "        # Áç≤ÂèñÊúàÊõÜË≥áË®ä\n",
        "        cal = calendar.monthcalendar(self.year, self.month)\n",
        "        month_name = calendar.month_name[self.month]\n",
        "\n",
        "        print(f\"üìÖ {self.year}Âπ¥ {month_name} ({self.month}Êúà)\")\n",
        "        print(\"ÈªûÊìä‰∏ãÊñπÊåâÈàïÈÅ∏ÊìáËá™ÂÆöÁæ©ÂÅáÊó• (Âè™ËÉΩÈÅ∏ÊìáÂπ≥Êó•):\")\n",
        "        print()\n",
        "\n",
        "        # ÂâµÂª∫Êó•ÊúüÊåâÈàï\n",
        "        buttons = []\n",
        "        for week in cal:\n",
        "            week_buttons = []\n",
        "            for day in week:\n",
        "                if day == 0:\n",
        "                    # Á©∫ÁôΩÊó•Êúü\n",
        "                    btn = widgets.Button(\n",
        "                        description='',\n",
        "                        disabled=True,\n",
        "                        layout=widgets.Layout(width='60px', height='40px')\n",
        "                    )\n",
        "                else:\n",
        "                    # Âà§Êñ∑ÊòØÂê¶ÁÇ∫Âπ≥Êó•\n",
        "                    current_date = date(self.year, self.month, day)\n",
        "                    weekday = current_date.weekday()\n",
        "                    is_weekend = weekday >= 5\n",
        "\n",
        "                    date_key = f\"{self.year}-{self.month:02d}-{day:02d}\"\n",
        "                    is_selected = date_key in self.selected_holidays\n",
        "\n",
        "                    # Ë®≠ÂÆöÊåâÈàïÊ®£Âºè\n",
        "                    if is_weekend:\n",
        "                        btn_style = ''\n",
        "                        disabled = True\n",
        "                        description = f'{day}\\n(ÈÄ±Êú´)'\n",
        "                    else:\n",
        "                        btn_style = 'warning' if is_selected else 'primary'\n",
        "                        disabled = False\n",
        "                        description = f'{day}'\n",
        "\n",
        "                    btn = widgets.Button(\n",
        "                        description=description,\n",
        "                        button_style=btn_style,\n",
        "                        disabled=disabled,\n",
        "                        layout=widgets.Layout(width='60px', height='40px')\n",
        "                    )\n",
        "\n",
        "                    if not disabled:\n",
        "                        btn.day = day\n",
        "                        btn.on_click(self.on_day_clicked)\n",
        "\n",
        "                week_buttons.append(btn)\n",
        "\n",
        "            buttons.append(widgets.HBox(week_buttons))\n",
        "\n",
        "        # È°ØÁ§∫ÊòüÊúüÊ®ôÈ°å\n",
        "        weekday_labels = widgets.HBox([\n",
        "            widgets.HTML(f\"<div style='width:60px; text-align:center; font-weight:bold;'>{day}</div>\")\n",
        "            for day in ['ÈÄ±‰∏Ä', 'ÈÄ±‰∫å', 'ÈÄ±‰∏â', 'ÈÄ±Âõõ', 'ÈÄ±‰∫î', 'ÈÄ±ÂÖ≠', 'ÈÄ±Êó•']\n",
        "        ])\n",
        "\n",
        "        display(widgets.VBox([weekday_labels] + buttons))\n",
        "\n",
        "        # È°ØÁ§∫Â∑≤ÈÅ∏ÊìáÁöÑÂÅáÊó•\n",
        "        if self.selected_holidays:\n",
        "            selected_list = sorted(list(self.selected_holidays))\n",
        "            print(f\"\\n‚úÖ Â∑≤ÈÅ∏ÊìáÁöÑËá™ÂÆöÁæ©ÂÅáÊó• ({len(selected_list)} Â§©):\")\n",
        "            for date_key in selected_list:\n",
        "                year, month, day = date_key.split('-')\n",
        "                current_date = date(int(year), int(month), int(day))\n",
        "                weekdays = ['‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠', 'Êó•']\n",
        "                weekday = weekdays[current_date.weekday()]\n",
        "                print(f\"  - {date_key} (ÈÄ±{weekday})\")\n",
        "\n",
        "    def on_day_clicked(self, btn):\n",
        "        \"\"\"Êó•ÊúüÊåâÈàïÈªûÊìä‰∫ã‰ª∂\"\"\"\n",
        "        day = btn.day\n",
        "        date_key = f\"{self.year}-{self.month:02d}-{day:02d}\"\n",
        "\n",
        "        if date_key in self.selected_holidays:\n",
        "            self.selected_holidays.remove(date_key)\n",
        "            btn.button_style = 'primary'\n",
        "        else:\n",
        "            self.selected_holidays.add(date_key)\n",
        "            btn.button_style = 'warning'\n",
        "\n",
        "        # ÈáçÊñ∞È°ØÁ§∫Â∑≤ÈÅ∏ÊìáÁöÑÂÅáÊó•Ê∏ÖÂñÆ\n",
        "        with self.calendar_output:\n",
        "            self.display_calendar()\n",
        "\n",
        "    def export_holidays(self, btn):\n",
        "        \"\"\"ÂåØÂá∫ÂÅáÊó•Ë®≠ÂÆö\"\"\"\n",
        "        with self.export_output:\n",
        "            clear_output()\n",
        "\n",
        "            if not self.selected_holidays:\n",
        "                print(\"‚ùå Ê≤íÊúâÈÅ∏Êìá‰ªª‰ΩïÂÅáÊó•\")\n",
        "                return\n",
        "\n",
        "            print(\"üìã Ë´ãÂ∞á‰ª•‰∏ãÁ®ãÂºèÁ¢ºË§áË£ΩÂà∞ÊÇ®ÁöÑ custom_holidays Â≠óÂÖ∏‰∏≠:\")\n",
        "            print(\"```python\")\n",
        "            print(\"custom_holidays = {\")\n",
        "\n",
        "            weekdays = ['‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠', 'Êó•']\n",
        "            for date_key in sorted(self.selected_holidays):\n",
        "                year, month, day = date_key.split('-')\n",
        "                current_date = date(int(year), int(month), int(day))\n",
        "                weekday = weekdays[current_date.weekday()]\n",
        "                print(f\"    '{date_key}': 'Ëá™ÂÆöÁæ©ÂÅáÊó•({weekday})',\")\n",
        "\n",
        "            print(\"}\")\n",
        "            print(\"```\")\n",
        "            print(f\"\\n‚úÖ Á∏ΩÂÖ±ÂåØÂá∫ {len(self.selected_holidays)} ÂÄãËá™ÂÆöÁæ©ÂÅáÊó•\")\n",
        "\n",
        "    def display(self):\n",
        "        \"\"\"È°ØÁ§∫ÊúàÊõÜÈÅ∏ÊìáÂô®\"\"\"\n",
        "        display(self.container)\n",
        "\n",
        "# ===== ‰∏ªÁ®ãÂºèÂïüÂãï =====\n",
        "def create_schedule_system():\n",
        "    \"\"\"ÂâµÂª∫‰∏¶È°ØÁ§∫‰∫íÂãïÂºèÁè≠Ë°®Á≥ªÁµ±\"\"\"\n",
        "    print(\"üöÄ Ê≠£Âú®ÂïüÂãï‰∫íÂãïÂºèÂì°Â∑•Áè≠Ë°®Á≥ªÁµ±...\")\n",
        "    app = ScheduleSystemApp()\n",
        "    app.display()\n",
        "    return app\n",
        "\n",
        "def create_calendar_selector():\n",
        "    \"\"\"ÂâµÂª∫‰∏¶È°ØÁ§∫‰∫íÂãïÂºèÊúàÊõÜÈÅ∏ÊìáÂô®\"\"\"\n",
        "    print(\"üóìÔ∏è Ê≠£Âú®ÂïüÂãï‰∫íÂãïÂºèÊúàÊõÜÈÅ∏ÊìáÂô®...\")\n",
        "    calendar = InteractiveCalendar()\n",
        "    calendar.display()\n",
        "    return calendar\n",
        "\n",
        "# ‰ΩøÁî®Ë™™Êòé\n",
        "print(\"\"\"\n",
        "üéØ ‰∫íÂãïÂºèÂì°Â∑•Áè≠Ë°®Âä†Áè≠ÊôÇÊï∏Áµ±Ë®àÁ≥ªÁµ±\n",
        "\n",
        "üìã ÂäüËÉΩÁâπËâ≤:\n",
        "‚úÖ Áõ¥ËßÄÁöÑÂúñÂΩ¢Âåñ‰ªãÈù¢ÔºåÁÑ°ÈúÄÊâãÂãïËº∏ÂÖ•Êåá‰ª§\n",
        "‚úÖ ‰∏ãÊãâÈÅ∏ÂñÆÈÅ∏Êìá‰∫∫‰∫ãËôüÔºåÈÅøÂÖçËº∏ÂÖ•ÈåØË™§\n",
        "‚úÖ ‰∫íÂãïÂºèÊúàÊõÜÈÅ∏ÊìáËá™ÂÆöÁæ©ÂÅáÊó•\n",
        "‚úÖ ‰∏ÄÈçµÂåØÂá∫ExcelÂ†±Ë°®\n",
        "‚úÖ Âç≥ÊôÇÈ°ØÁ§∫Êü•Ë©¢ÁµêÊûúÂíåÁµ±Ë®àË≥áË®ä\n",
        "\n",
        "üöÄ Âø´ÈÄüÈñãÂßã:\n",
        "1. Âü∑Ë°å app = create_schedule_system() ÂïüÂãï‰∏ªÁ≥ªÁµ±\n",
        "2. Âü∑Ë°å calendar = create_calendar_selector() ÂïüÂãïÊúàÊõÜÈÅ∏ÊìáÂô®\n",
        "\n",
        "üí° ‰ΩøÁî®ÊµÅÁ®ã:\n",
        "1. ÈªûÊìä„ÄåÂàùÂßãÂåñË≥áÊñô„ÄçËºâÂÖ•Áè≠Ë°®\n",
        "2. Âú®Á¨¨‰∏ÄÂÄãÊ®ôÁ±§È†ÅÈÅ∏Êìá‰∫∫‰∫ãËôüÂíåÂπ¥ÊúàÈÄ≤Ë°åÊü•Ë©¢\n",
        "3. Âú®Á¨¨‰∫åÂÄãÊ®ôÁ±§È†ÅÁÆ°ÁêÜËá™ÂÆöÁæ©ÂÅáÊó•\n",
        "4. ‰ΩøÁî®ÊúàÊõÜÈÅ∏ÊìáÂô®Ë®≠ÂÆöË§áÈõúÁöÑÂÅáÊó•ÂÆâÊéí\n",
        "\n",
        "üì¶ ÂøÖË¶ÅÂ•ó‰ª∂:\n",
        "- pandas\n",
        "- openpyxl\n",
        "- ipywidgets\n",
        "\n",
        "Â¶ÇÈúÄÂÆâË£ù: pip install pandas openpyxl ipywidgets\n",
        "\"\"\")\n",
        "\n",
        "# Ëá™ÂãïÂïüÂãïÁ§∫‰æã\n",
        "if __name__ == \"__main__\":\n",
        "    # ÂïüÂãï‰∏ªÁ≥ªÁµ±\n",
        "    app = create_schedule_system()\n",
        "\n",
        "    print(\"\\n\" + \"=\"*60)\n",
        "    print(\"üí° ÊèêÁ§∫: Â¶ÇÈúÄ‰ΩøÁî®ÊúàÊõÜÈÅ∏ÊìáÂô®ÔºåË´ãÂü∑Ë°å:\")\n",
        "    print(\"calendar = create_calendar_selector()\")\n",
        "    print(\"=\"*60)"
      ]
    }
  ]
}
